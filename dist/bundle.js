!function(n){var r={};function t(e){if(r[e])return r[e].exports;var a=r[e]={i:e,l:!1,exports:{}};return n[e].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=n,t.c=r,t.d=function(n,r,e){t.o(n,r)||Object.defineProperty(n,r,{configurable:!1,enumerable:!0,get:e})},t.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},t.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(r,"a",r),r},t.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},t.p="",t(t.s=32)}([function(n,r,t){var e,a,o={},i=(e=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=e.apply(this,arguments)),a}),l=function(n){var r={};return function(n){if("function"==typeof n)return n();if(void 0===r[n]){var t=function(n){return document.querySelector(n)}.call(this,n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}r[n]=t}return r[n]}}(),s=null,c=0,p=[],d=t(18);function u(n,r){for(var t=0;t<n.length;t++){var e=n[t],a=o[e.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](e.parts[i]);for(;i<e.parts.length;i++)a.parts.push(v(e.parts[i],r))}else{var l=[];for(i=0;i<e.parts.length;i++)l.push(v(e.parts[i],r));o[e.id]={id:e.id,refs:1,parts:l}}}}function f(n,r){for(var t=[],e={},a=0;a<n.length;a++){var o=n[a],i=r.base?o[0]+r.base:o[0],l={css:o[1],media:o[2],sourceMap:o[3]};e[i]?e[i].parts.push(l):t.push(e[i]={id:i,parts:[l]})}return t}function h(n,r){var t=l(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var e=p[p.length-1];if("top"===n.insertAt)e?e.nextSibling?t.insertBefore(r,e.nextSibling):t.appendChild(r):t.insertBefore(r,t.firstChild),p.push(r);else if("bottom"===n.insertAt)t.appendChild(r);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=l(n.insertInto+" "+n.insertAt.before);t.insertBefore(r,a)}}function m(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var r=p.indexOf(n);r>=0&&p.splice(r,1)}function b(n){var r=document.createElement("style");return n.attrs.type="text/css",y(r,n.attrs),h(n,r),r}function y(n,r){Object.keys(r).forEach(function(t){n.setAttribute(t,r[t])})}function v(n,r){var t,e,a,o;if(r.transform&&n.css){if(!(o=r.transform(n.css)))return function(){};n.css=o}if(r.singleton){var i=c++;t=s||(s=b(r)),e=w.bind(null,t,i,!1),a=w.bind(null,t,i,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var r=document.createElement("link");return n.attrs.type="text/css",n.attrs.rel="stylesheet",y(r,n.attrs),h(n,r),r}(r),e=function(n,r,t){var e=t.css,a=t.sourceMap,o=void 0===r.convertToAbsoluteUrls&&a;(r.convertToAbsoluteUrls||o)&&(e=d(e));a&&(e+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var i=new Blob([e],{type:"text/css"}),l=n.href;n.href=URL.createObjectURL(i),l&&URL.revokeObjectURL(l)}.bind(null,t,r),a=function(){m(t),t.href&&URL.revokeObjectURL(t.href)}):(t=b(r),e=function(n,r){var t=r.css,e=r.media;e&&n.setAttribute("media",e);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),a=function(){m(t)});return e(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;e(n=r)}else a()}}n.exports=function(n,r){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(r=r||{}).attrs="object"==typeof r.attrs?r.attrs:{},r.singleton||"boolean"==typeof r.singleton||(r.singleton=i()),r.insertInto||(r.insertInto="head"),r.insertAt||(r.insertAt="bottom");var t=f(n,r);return u(t,r),function(n){for(var e=[],a=0;a<t.length;a++){var i=t[a];(l=o[i.id]).refs--,e.push(l)}n&&u(f(n,r),r);for(a=0;a<e.length;a++){var l;if(0===(l=e[a]).refs){for(var s=0;s<l.parts.length;s++)l.parts[s]();delete o[l.id]}}}};var g,x=(g=[],function(n,r){return g[n]=r,g.filter(Boolean).join("\n")});function w(n,r,t,e){var a=t?"":e.css;if(n.styleSheet)n.styleSheet.cssText=x(r,a);else{var o=document.createTextNode(a),i=n.childNodes;i[r]&&n.removeChild(i[r]),i.length?n.insertBefore(o,i[r]):n.appendChild(o)}}},function(n,r){n.exports=function(n){var r=[];return r.toString=function(){return this.map(function(r){var t=function(n,r){var t=n[1]||"",e=n[3];if(!e)return t;if(r&&"function"==typeof btoa){var a=(i=e,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),o=e.sources.map(function(n){return"/*# sourceURL="+e.sourceRoot+n+" */"});return[t].concat(o).concat([a]).join("\n")}var i;return[t].join("\n")}(r,n);return r[2]?"@media "+r[2]+"{"+t+"}":t}).join("")},r.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var e={},a=0;a<this.length;a++){var o=this[a][0];"number"==typeof o&&(e[o]=!0)}for(a=0;a<n.length;a++){var i=n[a];"number"==typeof i[0]&&e[i[0]]||(t&&!i[2]?i[2]=t:t&&(i[2]="("+i[2]+") and ("+t+")"),r.push(i))}},r}},function(n,r,t){angular.module("pubgApp").component("appPlayerSection",{template:t(23),controller:function(){}})},function(n,r,t){(n.exports=t(1)(!1)).push([n.i,"*, *::before, *::after {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding:0;\r\n}\r\n\r\nhtml {\r\n    font-size: 62.5%;\r\n}",""])},function(n,r,t){var e=t(3);"string"==typeof e&&(e=[[n.i,e,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};t(0)(e,a);e.locals&&(n.exports=e.locals)},function(n,r,t){(n.exports=t(1)(!1)).push([n.i,"/* Style the video: 100% width and height to cover the entire window */\r\n#myVideo {\r\n    position: fixed;\r\n    right: 0;\r\n    bottom: 0;\r\n    min-width: 100%; \r\n    min-height: 100%;\r\n}\r\n\r\n/* Add some content at the bottom of the video/page */\r\n.content {\r\n    position: fixed;\r\n    bottom: 0;\r\n    background: rgba(0, 0, 0, 0.5);\r\n    color: #f1f1f1;\r\n    width: 100%;\r\n    padding: 20px;\r\n}\r\n\r\n/* Style the button used to pause/play the video */\r\n#myBtn {\r\n    width: 200px;\r\n    font-size: 18px;\r\n    padding: 10px;\r\n    border: none;\r\n    background: #000;\r\n    color: #fff;\r\n    cursor: pointer;\r\n}\r\n\r\n#myBtn:hover {\r\n    background: #ddd;\r\n    color: black;\r\n}",""])},function(n,r,t){var e=t(5);"string"==typeof e&&(e=[[n.i,e,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};t(0)(e,a);e.locals&&(n.exports=e.locals)},function(n,r){n.exports='\x3c!-- The video --\x3e\r\n<video autoplay muted loop id="myVideo">\r\n    <source src="rain.mp4" type="video/mp4">\r\n</video>\r\n\r\n\x3c!-- Optional: some overlay text to describe the video --\x3e\r\n<div class="content">\r\n    <h1>Heading</h1>\r\n    <p>Lorem ipsum...</p> \r\n</div>'},function(n,r,t){angular.module("pubgApp").component("appWelcome",{template:t(7),controller:function(){}}),t(6)},function(n,r){},function(n,r,t){(n.exports=t(1)(!1)).push([n.i,"/* * { box-sizing: border-box; }\r\nbody {\r\n  font: 16px Arial; \r\n}\r\n.autocomplete {\r\n  position: relative;\r\n  display: inline-block;\r\n}\r\ninput {\r\n  border: 1px solid transparent;\r\n  background-color: #f1f1f1;\r\n  padding: 10px;\r\n  font-size: 16px;\r\n}\r\ninput[type=text] {\r\n  background-color: #f1f1f1;\r\n}\r\ninput[type=submit] {\r\n  background-color: DodgerBlue;\r\n  color: #fff;\r\n}\r\n.autocomplete-items {\r\n  position: absolute;\r\n  border: 1px solid #d4d4d4;\r\n  border-bottom: none;\r\n  border-top: none;\r\n  z-index: 99;\r\n  \r\n  top: 100%;\r\n  left: 0;\r\n  right: 0;\r\n}\r\n.autocomplete-items div {\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  background-color: #fff; \r\n  border-bottom: 1px solid #d4d4d4; \r\n}\r\n.autocomplete-items div:hover {\r\n  background-color: #e9e9e9; \r\n}\r\n.autocomplete-active {\r\n  background-color: DodgerBlue !important; \r\n  color: #ffffff; \r\n} */",""])},function(n,r,t){var e=t(10);"string"==typeof e&&(e=[[n.i,e,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};t(0)(e,a);e.locals&&(n.exports=e.locals)},function(n,r){n.exports='\x3c!--Make sure the form has the autocomplete function switched off:--\x3e\r\n<form autocomplete="off" action="/action_page.php">\r\n    <div style="width:300px;">\r\n      <input id="myInput" type="text" name="myCountry" placeholder="Country">\r\n    </div>\r\n    <input type="submit">\r\n  </form>'},function(n,r,t){angular.module("pubgApp").component("appPlayerForm",{template:t(12),controller:function(){}}),t(11)},function(n,r,t){(n.exports=t(1)(!1)).push([n.i,".player-section {\r\n    background-color: #eee;\r\n}\r\n\r\n.container {\r\n    width: 80%;\r\n    margin: auto;\r\n}\r\n\r\n.player-container {\r\n    \r\n}\r\n\r\n.player-form-container {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    \r\n    flex-direction: column;\r\n}\r\n\r\n.player-input-name-section {\r\n    width: 50%;\r\n    margin-bottom: 2rem;\r\n}\r\n\r\n.select-label {\r\n    font-size: 2rem;\r\n    color: #333333;\r\n    display: block;\r\n}\r\n\r\n.player-name-input {\r\n    font-size: 2rem;\r\n    height: 3rem;\r\n    width: 100%;\r\n}\r\n\r\n.player-region-select {\r\n    height: 3rem;\r\n    display: block;\r\n\r\n    width: 100%;\r\n    font-size: 2rem;\r\n}\r\n\r\n.player-region-select-option {\r\n    font-size: 2rem;\r\n}\r\n\r\n.player-match-select {\r\n   height: 3rem;\r\n   width: 100%;\r\n   display: block;\r\n   font-size: 2rem\r\n}\r\n\r\n.player-match-select-option {\r\n flex-basis: 50%;\r\n}\r\n\r\n.player-search-user-container {\r\n    display:flex;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n.player-search-user-button {\r\n    display: block;\r\n    font-size: 2rem;\r\n    padding: .5rem;\r\n    flex-basis: 50%;\r\n}\r\n\r\n\r\n.player-select-section {\r\n    display: flex;\r\n    width: 50%;\r\n    justify-content: space-between;\r\n    margin-bottom: 2rem;\r\n}\r\n\r\n.player-region-container{\r\n    display: flex;\r\n    width: 45%;\r\n    flex-direction: column;\r\n} \r\n\r\n.player-match-container{\r\n    display: flex;\r\n    width: 50%;\r\n    flex-direction: column;\r\n} \r\n\r\n.match-info {\r\n    display: flex;\r\n    width: 50%;\r\n    margin: auto;\r\n}\r\n\r\n.match-info-container {\r\n    width: 100%;\r\n    display: block;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.match-info-mode {\r\n    font-size: 2.5rem;\r\n}\r\n\r\n.match-info-type{\r\n    font-size: 2.5rem;\r\n}\r\n.match-info-mapName{\r\n    font-size: 3rem;\r\n    display: block;\r\n    align-content: center;\r\n}\r\n.match-info-playerCount{\r\n    font-size: 2.5rem;\r\n}\r\n.match-info-played{\r\n    font-size: 2.5rem;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n.player-table {\r\n    width: 100%;\r\n    font-size: 2rem;\r\n}\r\n\r\n.player-table-row th:nth-child(1) {\r\n    width: 5%;\r\n    \r\n}\r\n\r\n.player-table-row th:nth-child(2) {\r\n    width: 20%;\r\n}\r\n.player-table-row th:nth-child(3) {\r\n    width: 5%;\r\n}\r\n.player-table-row th:nth-child(4) {\r\n    width: 10%;\r\n}\r\n.player-table-row th:nth-child(5) {\r\n    width: 10%;\r\n}\r\n.player-table-row th:nth-child(6) {\r\n    width: 10%;\r\n}\r\n.player-table-row th:nth-child(7) {\r\n    width: 8%;\r\n}\r\n.player-table-row th:nth-child(8) {\r\n    width: 10%;\r\n}\r\n.player-table-row th:nth-child(9) {\r\n    width: 8%;\r\n}\r\n.player-table-row th:nth-child(10) {\r\n    width: 14%;\r\n}\r\n\r\n.player-table tbody tr > td:not(:nth-of-type(2)) {\r\n    text-align: center;\r\n}",""])},function(n,r,t){var e=t(14);"string"==typeof e&&(e=[[n.i,e,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};t(0)(e,a);e.locals&&(n.exports=e.locals)},function(n,r){n.exports='<section class="player-section">\r\n    <div class="container">\r\n        <div class="player-container">\r\n            <div class="player-form-container">\r\n                <div class="player-input-name-section">\r\n                    <label class="select-label" for="player-name-input">Player name:</label>\r\n                    <input id="player-name-input" class="player-name-input" ng-model="$ctrl.searchPlayer" type="text" placeholder="Enter player name here ...">\r\n                </div>\r\n                <div class="player-select-section">\r\n                    <div class="player-region-container">\r\n                        <h2 class="select-label">Region: </h2>\r\n                        <select class="player-region-select" ng-model="$ctrl.region" placeholder="region">\r\n                            <option class="player-region-select-option" ng-repeat="region in $ctrl.regions" value={{region}}>{{region}}</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div class="player-match-container" ng-if="$ctrl.matches">\r\n                        <h2 class="select-label">Match: </h2>\r\n                        <select class="player-match-select" ng-model="$ctrl.match" ng-change="$ctrl.getMatch($ctrl.match)">\r\n                            <option class="player-match-select-option" ng-repeat="match in $ctrl.matches" value={{match.id}}>{{match.id}}</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class="player-search-user-container">\r\n                <button class="player-search-user-button" ng-click="$ctrl.search()">Search</button>\r\n\r\n            </div>\r\n\r\n\r\n            <div ng-if="$ctrl.match.data.data.attributes" class="match-info-container">\r\n                <ul class="match-info">\r\n                    <li class="match-info-mapName"><div>{{$ctrl.match.data.data.attributes.mapName | mapFilter}}</div></li>\r\n                    <li class="match-info-mode"><div>Mode: {{$ctrl.match.data.data.attributes.gameMode | modeFilter}}</div></li>\r\n                    <li class="match-info-type"><div>Match type: {{$ctrl.match.data.data.attributes.gameMode | matchTypeFilter}}</div></li>\r\n                    <li class="match-info-playerCount"><div>Player count: {{viewData.filteredArray.length}}</div></li>\r\n                    <li class="match-info-played"><div>Played at : {{$ctrl.match.data.data.attributes.createdAt | date:\'medium\' }}</div> </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <table border="1" class="player-table" ng-if="$ctrl.match">\r\n                <thead>\r\n                    <tr class="player-table-row">\r\n\r\n                        <th>#</th>\r\n                        <th>name</th>\r\n                        <th>winplace</th>\r\n                        <th>kills</th>\r\n                        <th>Knocked times</th>\r\n                        <th>damagedone</th>\r\n                        <th>assists</th>\r\n                        <th>Healed</th>\r\n                        <th>revives</th>\r\n                        <th>longest kill</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr ng-repeat=\'player in (viewData.filteredArray = ($ctrl.match.data.included | playerFilter ))\'>\r\n\r\n                        <td>{{$index + 1}}</td>\r\n                        <td>{{player.attributes.stats.name}}</td>\r\n                        <td>{{player.attributes.stats.winPlace}}</td>\r\n                        <td>{{player.attributes.stats.kills}}({{player.attributes.stats.headshotKills}}head)</td>\r\n                        <td>{{player.attributes.stats.DBNOs}}</td>\r\n                        <td>{{player.attributes.stats.damageDealt | parseToIntFilter}} damage</td>\r\n                        <td>{{player.attributes.stats.assists}}</td>\r\n                        <td>{{player.attributes.stats.boosts}}boost {{player.attributes.stats.heals}}heal</td>\r\n                        <td>{{player.attributes.stats.revives}} revives</td>\r\n                        <td>{{player.attributes.stats.longestKill}}m</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n\r\n            \x3c!-- <ul >\r\n                <li ng-repeat=\'player in $ctrl.match.data.included | playerFilter \'>\r\n                    <span>{{player.attributes.stats.winPlace}}</span>\r\n                    <span>{{player.attributes.stats.name}}</span>\r\n                    <span>{{\' Kills \' + player.attributes.stats.kills}}</span>\r\n                    <span>{{\' Revived: \' + player.attributes.stats.DBNOs}}</span>\r\n                    <span>{{\' Damage dealt: \' + player.attributes.stats.damageDealt}}</span>\r\n\r\n                </li>\r\n            </ul> --\x3e\r\n        </div>\r\n    </div>\r\n</section>'},function(n,r,t){angular.module("pubgApp").component("appPlayerInput",{template:t(16),controller:["$scope","$log","PlayerDataService","MatchDataService","RegionsService",function(n,r,t,e,a){let o=this;this.$onInit=function(){o.region="",a.allRegions().then(n=>{o.regions=n}),n.viewData={}},o.search=function(){t.getPlayer(o.searchPlayer,o.region).then(n=>{console.log(n.data.data[0]),o.matches=n.data.data[0].relationships.matches.data,console.log(o.matches)})},o.getMatch=function(n){console.log(n),e.getMatchData(n,o.region).then(n=>{o.match=n,console.log(n)})}}]}),t(15)},function(n,r){n.exports=function(n){var r="undefined"!=typeof window&&window.location;if(!r)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=r.protocol+"//"+r.host,e=t+r.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,r){var a,o=r.trim().replace(/^"(.*)"$/,function(n,r){return r}).replace(/^'(.*)'$/,function(n,r){return r});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?n:(a=0===o.indexOf("//")?o:0===o.indexOf("/")?t+o:e+o.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")})}},function(n,r,t){(n.exports=t(1)(!1)).push([n.i,".topnav {\r\n    background-color: #333;\r\n    overflow: hidden;\r\n}\r\n\r\n/* Style the links inside the navigation bar */\r\n.topnav a {\r\n    float: left;\r\n    color: #f2f2f2;\r\n    text-align: center;\r\n    padding: 14px 16px;\r\n    text-decoration: none;\r\n    font-size: 17px;\r\n}\r\n\r\n/* Change the color of links on hover */\r\n.topnav a:hover {\r\n    background-color: #ddd;\r\n    color: black;\r\n}\r\n\r\n/* Add a color to the active/current link */\r\n.topnav a.active {\r\n    background-color: #4CAF50;\r\n    color: white;\r\n}\r\n",""])},function(n,r,t){var e=t(19);"string"==typeof e&&(e=[[n.i,e,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};t(0)(e,a);e.locals&&(n.exports=e.locals)},function(n,r){n.exports='<div class="topnav">\r\n    <a class="active" href="#home">Home</a>\r\n    <a href="#news">News</a>\r\n    <a href="#contact">Contact</a>\r\n    <a href="#about">About</a>\r\n</div>\r\n\x3c!-- <header class="navigation">\r\n    <div class="container">\r\n        <div class="header">\r\n            <div class="logo">\r\n                <img src="" alt="">\r\n            </div>\r\n            <nav class="nav">\r\n                <ul class="navlist">\r\n                    <li class="navitem">Players</li>\r\n                    <li class="navitem">Matches</li>\r\n                    <li class="navitem">About</li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    </div>\r\n</header> --\x3e'},function(n,r,t){angular.module("pubgApp").component("appNavBar",{template:t(21),controller:function(){this.name="William"}}),t(20)},function(n,r){n.exports="<p>Hello player!</p>\r\n<app-player-input></app-player-input>\r\n"},function(n,r){angular.module("pubgApp").filter("mapFilter",function(){return function(n){if(!n)return;let r=n.split("_");return r.pop(),r.join("")}})},function(n,r){angular.module("pubgApp").filter("matchTypeFilter",function(){return function(n){if(!n)return;let r=n.split("-");return r.shift(),r.join("")}})},function(n,r){angular.module("pubgApp").filter("modeFilter",function(){return function(n){if(!n)return;let r=n.split("-");return r.pop(),r.join("")}})},function(n,r){angular.module("pubgApp").filter("parseToIntFilter",function(){return function(n){return parseInt(n).toFixed()}})},function(n,r){angular.module("pubgApp").filter("playerFilter",function(){return function(n){let r=n.filter(n=>"participant"==n.type).sort((n,r)=>{var t=parseInt(n.attributes.stats.winPlace),e=parseInt(r.attributes.stats.winPlace);return t>e?1:t<e?-1:0});return console.log(r),r}})},function(n,r){angular.module("pubgApp").service("RegionsService",["$q",class{constructor(n){this.q=n}allRegions(){return this.q((n,r)=>{n(["xbox-as","xbox-eu","xbox-na","xbox-oc","pc-krjp","pc-jp","pc-na","pc-eu","pc-oc","pc-kakao","pc-sea","pc-sa","pc-as"])})}}])},function(n,r){angular.module("pubgApp").service("PlayerDataService",["$http",class{constructor(n){this.http=n}getPlayer(n,r){return this.http({method:"GET",url:`https://api.playbattlegrounds.com/shards/${r}/players?filter[playerNames]=${n}`,headers:{Accept:"application/vnd.api+json",Authorization:"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJlZTU4NDdjMC0xYTczLTAxMzYtOWE0NS02MWFjOTE3MDJiMmEiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNTIyODczMzk2LCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6ImFzdG9uMDAiLCJzY29wZSI6ImNvbW11bml0eSIsImxpbWl0IjoxMH0.Ehj2HmctxqBo6tXKJgFgaxaCijN6QO3acqbdbudjy50"}})}}])},function(n,r){angular.module("pubgApp").service("MatchDataService",["$http",class{constructor(n){this.http=n}getMatchData(n,r){return this.http({method:"GET",url:`https://api.playbattlegrounds.com/shards/${r}/matches/${n}`,headers:{Accept:"application/vnd.api+json",Authorization:"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJlZTU4NDdjMC0xYTczLTAxMzYtOWE0NS02MWFjOTE3MDJiMmEiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNTIyODczMzk2LCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6ImFzdG9uMDAiLCJzY29wZSI6ImNvbW11bml0eSIsImxpbWl0IjoxMH0.Ehj2HmctxqBo6tXKJgFgaxaCijN6QO3acqbdbudjy50"}})}}])},function(n,r,t){angular.module("pubgApp",[]);t(31),t(30),t(29),t(28),t(27),t(26),t(25),t(24),t(2),t(22),t(2),t(17),t(13),t(9),t(8),t(4)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,