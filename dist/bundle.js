!function(r){var n={};function t(e){if(n[e])return n[e].exports;var i=n[e]={i:e,l:!1,exports:{}};return r[e].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=r,t.c=n,t.d=function(r,n,e){t.o(r,n)||Object.defineProperty(r,n,{configurable:!1,enumerable:!0,get:e})},t.r=function(r){Object.defineProperty(r,"__esModule",{value:!0})},t.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return t.d(n,"a",n),n},t.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},t.p="",t(t.s=24)}([function(r,n,t){var e,i,a={},o=(e=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=e.apply(this,arguments)),i}),l=function(r){var n={};return function(r){if("function"==typeof r)return r();if(void 0===n[r]){var t=function(r){return document.querySelector(r)}.call(this,r);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(r){t=null}n[r]=t}return n[r]}}(),s=null,c=0,p=[],u=t(8);function d(r,n){for(var t=0;t<r.length;t++){var e=r[t],i=a[e.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](e.parts[o]);for(;o<e.parts.length;o++)i.parts.push(g(e.parts[o],n))}else{var l=[];for(o=0;o<e.parts.length;o++)l.push(g(e.parts[o],n));a[e.id]={id:e.id,refs:1,parts:l}}}}function f(r,n){for(var t=[],e={},i=0;i<r.length;i++){var a=r[i],o=n.base?a[0]+n.base:a[0],l={css:a[1],media:a[2],sourceMap:a[3]};e[o]?e[o].parts.push(l):t.push(e[o]={id:o,parts:[l]})}return t}function h(r,n){var t=l(r.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var e=p[p.length-1];if("top"===r.insertAt)e?e.nextSibling?t.insertBefore(n,e.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),p.push(n);else if("bottom"===r.insertAt)t.appendChild(n);else{if("object"!=typeof r.insertAt||!r.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=l(r.insertInto+" "+r.insertAt.before);t.insertBefore(n,i)}}function m(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r);var n=p.indexOf(r);n>=0&&p.splice(n,1)}function b(r){var n=document.createElement("style");return r.attrs.type="text/css",y(n,r.attrs),h(r,n),n}function y(r,n){Object.keys(n).forEach(function(t){r.setAttribute(t,n[t])})}function g(r,n){var t,e,i,a;if(n.transform&&r.css){if(!(a=n.transform(r.css)))return function(){};r.css=a}if(n.singleton){var o=c++;t=s||(s=b(n)),e=w.bind(null,t,o,!1),i=w.bind(null,t,o,!0)}else r.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(r){var n=document.createElement("link");return r.attrs.type="text/css",r.attrs.rel="stylesheet",y(n,r.attrs),h(r,n),n}(n),e=function(r,n,t){var e=t.css,i=t.sourceMap,a=void 0===n.convertToAbsoluteUrls&&i;(n.convertToAbsoluteUrls||a)&&(e=u(e));i&&(e+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var o=new Blob([e],{type:"text/css"}),l=r.href;r.href=URL.createObjectURL(o),l&&URL.revokeObjectURL(l)}.bind(null,t,n),i=function(){m(t),t.href&&URL.revokeObjectURL(t.href)}):(t=b(n),e=function(r,n){var t=n.css,e=n.media;e&&r.setAttribute("media",e);if(r.styleSheet)r.styleSheet.cssText=t;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(t))}}.bind(null,t),i=function(){m(t)});return e(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap)return;e(r=n)}else i()}}r.exports=function(r,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=o()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=f(r,n);return d(t,n),function(r){for(var e=[],i=0;i<t.length;i++){var o=t[i];(l=a[o.id]).refs--,e.push(l)}r&&d(f(r,n),n);for(i=0;i<e.length;i++){var l;if(0===(l=e[i]).refs){for(var s=0;s<l.parts.length;s++)l.parts[s]();delete a[l.id]}}}};var v,x=(v=[],function(r,n){return v[r]=n,v.filter(Boolean).join("\n")});function w(r,n,t,e){var i=t?"":e.css;if(r.styleSheet)r.styleSheet.cssText=x(n,i);else{var a=document.createTextNode(i),o=r.childNodes;o[n]&&r.removeChild(o[n]),o.length?r.insertBefore(a,o[n]):r.appendChild(a)}}},function(r,n){r.exports=function(r){var n=[];return n.toString=function(){return this.map(function(n){var t=function(r,n){var t=r[1]||"",e=r[3];if(!e)return t;if(n&&"function"==typeof btoa){var i=(o=e,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),a=e.sources.map(function(r){return"/*# sourceURL="+e.sourceRoot+r+" */"});return[t].concat(a).concat([i]).join("\n")}var o;return[t].join("\n")}(n,r);return n[2]?"@media "+n[2]+"{"+t+"}":t}).join("")},n.i=function(r,t){"string"==typeof r&&(r=[[null,r,""]]);for(var e={},i=0;i<this.length;i++){var a=this[i][0];"number"==typeof a&&(e[a]=!0)}for(i=0;i<r.length;i++){var o=r[i];"number"==typeof o[0]&&e[o[0]]||(t&&!o[2]?o[2]=t:t&&(o[2]="("+o[2]+") and ("+t+")"),n.push(o))}},n}},function(r,n,t){(r.exports=t(1)(!1)).push([r.i,"*, *::before, *::after {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding:0;\r\n}\r\nbody {\r\n    font-family: 'Athiti', sans-serif;\r\n    background-color: #fafafa;\r\n}\r\nhtml {\r\n    \r\n    font-size: 62.5%;\r\n}",""])},function(r,n,t){var e=t(2);"string"==typeof e&&(e=[[r.i,e,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(0)(e,i);e.locals&&(r.exports=e.locals)},function(r,n,t){(r.exports=t(1)(!1)).push([r.i,".app-footer {\r\n    display: flex;\r\n    height: 20rem;\r\n    background-color: inherit;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.footer-container {\r\n    flex-basis: 50%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n}\r\n\r\n\r\n.footer-copyright {\r\n    font-size: 2.5rem;\r\n    letter-spacing: .2rem;\r\n    font-weight: 600;\r\n    color: #10b295;\r\n}",""])},function(r,n,t){var e=t(4);"string"==typeof e&&(e=[[r.i,e,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(0)(e,i);e.locals&&(r.exports=e.locals)},function(r,n){r.exports='<div class="app-footer">\r\n    <div class="footer-container">\r\n        \r\n            <h2 class="footer-copyright">Made by Anatolii Yatsenko &copy; 2018</h2>\r\n        \r\n    </div>\r\n</div>'},function(r,n,t){angular.module("pubgApp").component("appFooter",{template:t(6),controller:function(){}}),t(5)},function(r,n){r.exports=function(r){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!r||"string"!=typeof r)return r;var t=n.protocol+"//"+n.host,e=t+n.pathname.replace(/\/[^\/]*$/,"/");return r.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(r,n){var i,a=n.trim().replace(/^"(.*)"$/,function(r,n){return n}).replace(/^'(.*)'$/,function(r,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?r:(i=0===a.indexOf("//")?a:0===a.indexOf("/")?t+a:e+a.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(r,n,t){(r.exports=t(1)(!1)).push([r.i,".player-section {\r\n    padding-top: 3.2rem;\r\n    padding-bottom: 3.5rem;\r\n}\r\ninput:-webkit-autofill {\r\n    -webkit-box-shadow: inset 0 0 0 50px #fafafa;\r\n    -webkit-text-fill-color: #10b295 !important;\r\n}\r\n.container {\r\n    width: 80%;\r\n    margin: auto;\r\n}\r\n\r\n.welcome-msg {\r\n    font-size: 4.2rem;\r\n    color: #1E90FF;\r\n    text-align: center;\r\n}\r\n\r\n\r\n.player-form-container {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    margin-top: 7rem;\r\n    margin-bottom: 2rem;\r\n}\r\n\r\n\r\n.player-region-select {\r\n    height: 3rem;\r\n    display: block;\r\n    border: 1px solid #10b295;\r\n    width: 100%;\r\n    font-size: 2rem;\r\n    outline: none;\r\n    border-radius: 5px;\r\n    color: #10b295;\r\n}\r\n\r\n.player-region-select-option {\r\n    font-size: 2rem;\r\n}\r\n\r\n.player-match-select {\r\n    height: 3rem;\r\n    display: block;\r\n    border: 1px solid #10b295;\r\n    width: 100%;\r\n    font-size: 2rem;\r\n    outline: none;\r\n    border-radius: 5px;\r\n    color: #10b295;\r\n}\r\n\r\n.player-match-select-option {\r\n    flex-basis: 50%;\r\n}\r\n\r\n.player-search-user-container {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.player-search-user-button {\r\n    display: block;\r\n    font-size: 2rem;\r\n    padding: .5rem;\r\n    flex-basis: 50%;\r\n    color: #fafafa;\r\n    background-color: #10b295;\r\n    border: 1px solid #1E90FF;\r\n    border-radius: 10px;\r\n    outline: none;\r\n    transition: all .1s;\r\n}\r\n\r\n.player-search-user-button:active {\r\n    transform: scale(1.04) translateX(8px);\r\n    letter-spacing: .1rem;\r\n    background-color: #10B2C6;\r\n}\r\n\r\n.player-select-section {\r\n    display: flex;\r\n    width: 50%;\r\n    justify-content: space-between;\r\n    margin-bottom: 2rem;\r\n}\r\n\r\n.player-region-container {\r\n    display: flex;\r\n    width: 45%;\r\n    flex-direction: column;\r\n}\r\n\r\n.player-match-container {\r\n    display: flex;\r\n    width: 50%;\r\n    flex-direction: column;\r\n}\r\n\r\n.match-info-container {\r\n    width: 100%;\r\n    display: block;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    padding: 5rem 0 6rem 0;\r\n}\r\n\r\n.match-info {\r\n    display: flex;\r\n    width: 70%;\r\n    list-style: none;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n    margin-top: 2rem;\r\n}\r\n\r\n.match-info>li {\r\n    flex-basis: 30%;\r\n    height: 5rem;\r\n    border-bottom: 1px solid #10b295;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #1E90FF;\r\n}\r\n\r\n.match-info-mapName {\r\n    color: #1E90FF;\r\n    font-size: 4rem;\r\n    letter-spacing: .2rem;\r\n    border-bottom: #10b295;\r\n    display: block;\r\n    align-content: center;\r\n    margin: .5rem 0 1rem 0;\r\n}\r\n\r\n.match-info-mode {\r\n    font-size: 2.5rem;\r\n}\r\n\r\n.match-info-type {\r\n    font-size: 2.5rem;\r\n}\r\n\r\n.match-info-playerCount {\r\n    font-size: 2.5rem;\r\n}\r\n\r\n.match-info-played {\r\n    font-size: 2.5rem;\r\n    color: #1E90FF;\r\n    border-bottom: 1px solid #10b295;\r\n}\r\n\r\n.filter-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 30%;\r\n    margin: 4rem auto 7rem auto;\r\n}\r\n\r\n.player-input-name-section {\r\n    display: block;\r\n    position: relative;\r\n    width: 50%;\r\n    margin-bottom: 2rem;\r\n}\r\n.filter-container {\r\n    display: block;\r\n    position: relative;\r\n    width: 30%;\r\n    margin-bottom: 8rem;\r\n}\r\n\r\n.player-input-name-section label, .filter-container label{\r\n    position: absolute;\r\n    left: 0;\r\n    color: #333333;\r\n    display: block;\r\n    font-weight: 600;\r\n    margin-bottom: .5rem;\r\n    top: -1.5rem;\r\n    cursor: text;\r\n    font-size: 120%;\r\n    opacity: 1;\r\n    transition: all 0.2s;\r\n}\r\n\r\n\r\n.player-name-input, .filter-input {\r\n    font-family: 'Athiti', sans-serif;\r\n    font-size: inherit;\r\n    margin-bottom: .2rem;\r\n    font-size: 2rem;\r\n    height: 3rem;\r\n    font-weight: 600;\r\n    width: 100%;\r\n    color: #10b295;\r\n    border: none;\r\n    border-bottom: 2px solid;\r\n    background-color: inherit;\r\n\r\n    transition: letter-spacing .2s;\r\n}\r\n.player-input-name-section input::placeholder,\r\n.filter-container input::placeholder {\r\n    opacity: 1;\r\n    color: #10b295;\r\n}\r\n\r\n\r\n\r\n  .player-input-name-section input:placeholder-shown:not(:focus)::placeholder,\r\n  .filter-container input:placeholder-shown:not(:focus)::placeholder {\r\n    opacity: 0;\r\n  }\r\n  .player-input-name-section input:placeholder-shown:not(:focus) + *,\r\n  .filter-container input:placeholder-shown:not(:focus) + *  {\r\n    font-size: 2rem;\r\n    opacity: 1;\r\n    color: #10b295;\r\n    top: -.2rem;\r\n  }\r\n  .player-name-input.ng-valid.ng-not-empty.ng-dirty.ng-valid-parse.ng-touched,\r\n  .filter-input.ng-valid.ng-not-empty.ng-dirty.ng-valid-parse.ng-touched {\r\n      border-color: #333333;\r\n  }\r\n\r\n  .player-input-name-section input:focus,\r\n  .filter-container input:focus {\r\n\r\n    color: #10b295;\r\n    outline: none;\r\n    border-color: #333333;\r\n  }\r\n\r\n.player-table {\r\n    width: 100%;\r\n    margin-bottom: 20rem;\r\n    font-size: 2rem;\r\n    border-collapse: collapse;\r\n}\r\n\r\n.player-table th {\r\n    border: 2px solid #33BFEB;\r\n    padding: .3rem 0;\r\n    color: #fafafa;\r\n    background-color: #1E90FF;\r\n    cursor: pointer;\r\n}\r\n\r\n.player-table td,\r\n.player-table th {\r\n    border: 2px solid #33BFEB;\r\n    padding: .3rem 0;\r\n}\r\n\r\n.player-table-row th:nth-child(1) {\r\n    width: 5%;\r\n}\r\n\r\n.player-table-row th:nth-child(2) {\r\n    width: 20%;\r\n    padding: .3rem 0;\r\n}\r\n\r\n.player-table-row th:nth-child(3) {\r\n    width: 5%;\r\n}\r\n\r\n.player-table-row th:nth-child(4) {\r\n    width: 10%;\r\n}\r\n\r\n.player-table-row th:nth-child(5) {\r\n    width: 10%;\r\n}\r\n\r\n.player-table-row th:nth-child(6) {\r\n    width: 10%;\r\n}\r\n\r\n.player-table-row th:nth-child(7) {\r\n    width: 8%;\r\n}\r\n\r\n.player-table-row th:nth-child(8) {\r\n    width: 8%;\r\n}\r\n\r\n.player-table-row th:nth-child(9) {\r\n    width: 7%;\r\n}\r\n\r\n.player-table-row th:nth-child(10) {\r\n    width: 8%;\r\n}\r\n.player-table-row th:nth-child(11) {\r\n    width: 9%;\r\n}\r\n.player-table tbody tr>td:nth-of-type(2) {\r\n    font-weight: 600;\r\n    padding-left: 1rem;\r\n    color: #1E90FF;\r\n}\r\n\r\n.player-table tbody tr>td:not(:nth-of-type(2)) {\r\n    text-align: center;\r\n    color: #1E90FF;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n",""])},function(r,n,t){var e=t(9);"string"==typeof e&&(e=[[r.i,e,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(0)(e,i);e.locals&&(r.exports=e.locals)},function(r,n){r.exports='<section class="player-section">\r\n    <div class="container">\r\n        <div class="player-container">\r\n            <div class="welcome-msg">\r\n                <h2>Welcome to PUBG History API</h2>\r\n            </div>\r\n            <div class="player-form-container">\r\n                <div class="player-input-name-section">\r\n                   \r\n                    <input autocomplete="on" id="player-name-input" class="player-name-input" ng-model="$ctrl.searchPlayer"  type="text" placeholder="Player name ...">\r\n                    <label class="select-label" for="player-name-input">Player name:</label>\r\n                </div>\r\n                <div class="player-select-section">\r\n                    <div class="player-region-container">\r\n                        <h2 class="select-label">Region: </h2>\r\n                        <select class="player-region-select" ng-model="$ctrl.region" placeholder="region">\r\n                            <option class="player-region-select-option" ng-repeat="region in $ctrl.regions" value={{region}}>{{region}}</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div class="player-match-container" ng-if="$ctrl.matches">\r\n                        <h2 class="select-label">Match: </h2>\r\n                        <select class="player-match-select" ng-model="$ctrl.match" ng-change="$ctrl.getMatch($ctrl.match)">\r\n                            <option class="player-match-select-option" ng-repeat="match in $ctrl.matches" value={{match.id}}>{{$index + 1}} - {{match.id}}</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class="player-search-user-container">\r\n                <button class="player-search-user-button" ng-click="$ctrl.search()">Search</button>\r\n\r\n            </div>\r\n\r\n            \r\n            <div ng-if="$ctrl.match.data.data.attributes" class="match-info-container">\r\n\r\n                <div class="match-info-mapName">{{$ctrl.match.data.data.attributes.mapName | mapFilter}}</div>\r\n                <div class="match-info-played">{{$ctrl.match.data.data.attributes.createdAt | date:\'medium\' }}</div>\r\n\r\n                <ul class="match-info">\r\n                    <li class="match-info-mode">\r\n                        <div>Mode: {{$ctrl.match.data.data.attributes.gameMode | modeFilter}}</div>\r\n                    </li>\r\n                    <li class="match-info-type">\r\n                        <div>Match type: {{$ctrl.match.data.data.attributes.gameMode | matchTypeFilter}}</div>\r\n                    </li>\r\n                    <li class="match-info-playerCount">\r\n                        <div>Participants: {{viewData.filteredArray.length}}</div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div class="filter-container" ng-if="$ctrl.match.data.included">\r\n                <input placeholder="Filter value here ..." id="filter-input" class="filter-input" type="text" ng-model="$ctrl.filterValue">\r\n                <label for="filter-input">Filter</label>\r\n            </div>\r\n\r\n            <table border="1" class="player-table" ng-if="$ctrl.match.data.included">\r\n                <thead>\r\n                    <tr class="player-table-row">\r\n\r\n                        <th>#</th>\r\n                        <th>Player</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'winPlace\', $ctrl.reversal)">Place</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'kills\', $ctrl.reversal)">Kills</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'DBNOs\', $ctrl.reversal)">Knocked Times</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'damageDealt\', $ctrl.reversal)">Damage Dealt</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'assists\', $ctrl.reversal)">Assists</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'heals\', $ctrl.reversal)">Heals</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'boosts\', $ctrl.reversal)">Boosts</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'revives\', $ctrl.reversal)">Revives</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'longestKill\', $ctrl.reversal)">Longest Kill</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr ng-repeat=\'player in (viewData.filteredArray = ($ctrl.match.data.included | playerFilter:$ctrl.sortProperty:$ctrl.reversal | playerNameFilter: $ctrl.filterValue ))\'>\r\n\r\n                        <td>{{$index + 1}}</td>\r\n                        <td>{{player.attributes.stats.name}}</td>\r\n                        <td>{{player.attributes.stats.winPlace}}</td>\r\n                        <td>{{player.attributes.stats.kills}}({{player.attributes.stats.headshotKills}}head)</td>\r\n                        <td>{{player.attributes.stats.DBNOs}}</td>\r\n                        <td>{{player.attributes.stats.damageDealt | parseToIntFilter}}hp</td>\r\n                        <td>{{player.attributes.stats.assists}}</td>\r\n                        <td>{{player.attributes.stats.heals}}heals</td>\r\n                        <td>{{player.attributes.stats.boosts}}boosts</td>\r\n                        <td>{{player.attributes.stats.revives}}revives</td>\r\n                        <td>{{player.attributes.stats.longestKill}}m</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n</section>'},function(r,n,t){angular.module("pubgApp").component("appPlayerInput",{template:t(11),controller:["$scope","$log","PlayerDataService","MatchDataService","RegionsService",function(r,n,t,e,i){let a=this;this.$onInit=function(){a.region="",i.allRegions().then(r=>{a.regions=r}),a.sortProperty="winPlace",r.viewData={},a.reversal=!0},a.changeSortProperty=function(r,n){a.sortProperty=r,a.reversal=Boolean(n)},a.search=function(){t.getPlayer(a.searchPlayer,a.region).then(r=>{a.matches=r.data.data[0].relationships.matches.data}).catch(r=>{alert("Wrong name"),console.log(r)})},a.getMatch=function(r){e.getMatchData(r,a.region).then(r=>{a.match=r})}}]}),t(10)},function(r,n){r.exports="<app-player-input></app-player-input>\r\n"},function(r,n,t){angular.module("pubgApp").component("appPlayerSection",{template:t(13),controller:function(){}})},function(r,n){angular.module("pubgApp").filter("playerNameFilter",function(){return function(r,n){if(console.log(r),n){return r.filter(r=>-1!=r.attributes.stats.name.indexOf(n))}return r}})},function(r,n){angular.module("pubgApp").filter("mapFilter",function(){return function(r){if(!r)return;let n=r.split("_");return n.pop(),"Desert"==n?"Miramar":n.join("")}})},function(r,n){angular.module("pubgApp").filter("matchTypeFilter",function(){return function(r){if(r){if(-1!=r.indexOf("-")){let n=r.split("-");return n.shift(),n.join("")}return r.slice(r.length-3,r.length)}}})},function(r,n){angular.module("pubgApp").filter("modeFilter",function(){return function(r){if(r){if(-1!=r.indexOf("-")){let n=r.split("-");return n.pop(),n.join("")}return r.slice(0,r.length-3)}}})},function(r,n){angular.module("pubgApp").filter("parseToIntFilter",function(){return function(r){return parseInt(r).toFixed()}})},function(r,n){angular.module("pubgApp").filter("playerFilter",function(){return function(r,n,t){return r.filter(r=>"participant"==r.type).sort((r,t)=>{if("winPlace"!=n){let e=parseInt(Number(r.attributes.stats[n])),i=parseInt(Number(t.attributes.stats[n]));return e<i?1:e>i?-1:0}{let e=parseInt(Number(r.attributes.stats[n])),i=parseInt(Number(t.attributes.stats[n]));return e>i?1:e<i?-1:0}})}})},function(r,n){angular.module("pubgApp").service("RegionsService",["$q",class{constructor(r){this.q=r}allRegions(){return this.q((r,n)=>{r(["xbox-as","xbox-eu","xbox-na","xbox-oc","pc-krjp","pc-jp","pc-na","pc-eu","pc-oc","pc-kakao","pc-sea","pc-sa","pc-as"])})}}])},function(r,n){angular.module("pubgApp").service("PlayerDataService",["$http",class{constructor(r){this.http=r}getPlayer(r,n){return this.http({method:"GET",url:`https://api.playbattlegrounds.com/shards/${n}/players?filter[playerNames]=${r}`,headers:{Accept:"application/vnd.api+json",Authorization:"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJlZTU4NDdjMC0xYTczLTAxMzYtOWE0NS02MWFjOTE3MDJiMmEiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNTIyODczMzk2LCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6ImFzdG9uMDAiLCJzY29wZSI6ImNvbW11bml0eSIsImxpbWl0IjoxMH0.Ehj2HmctxqBo6tXKJgFgaxaCijN6QO3acqbdbudjy50"}})}}])},function(r,n){angular.module("pubgApp").service("MatchDataService",["$http",class{constructor(r){this.http=r}getMatchData(r,n){return this.http({method:"GET",url:`https://api.playbattlegrounds.com/shards/${n}/matches/${r}`,headers:{Accept:"application/vnd.api+json",Authorization:"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJlZTU4NDdjMC0xYTczLTAxMzYtOWE0NS02MWFjOTE3MDJiMmEiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNTIyODczMzk2LCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6ImFzdG9uMDAiLCJzY29wZSI6ImNvbW11bml0eSIsImxpbWl0IjoxMH0.Ehj2HmctxqBo6tXKJgFgaxaCijN6QO3acqbdbudjy50"}})}}])},function(r,n,t){angular.module("pubgApp",["ui.router"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(r,n,t){n.otherwise("/"),r.state("home",{url:"/",template:"<app-player-input></app-player-input> "})}]),t(23),t(22),t(21),t(20),t(19),t(18),t(17),t(16),t(15),t(14),t(12),t(7),t(3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,