!function(r){var n={};function t(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return r[e].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=r,t.c=n,t.d=function(r,n,e){t.o(r,n)||Object.defineProperty(r,n,{configurable:!1,enumerable:!0,get:e})},t.r=function(r){Object.defineProperty(r,"__esModule",{value:!0})},t.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return t.d(n,"a",n),n},t.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},t.p="",t(t.s=36)}([function(r,n,t){var e,o,i={},a=(e=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=e.apply(this,arguments)),o}),l=function(r){var n={};return function(r){if("function"==typeof r)return r();if(void 0===n[r]){var t=function(r){return document.querySelector(r)}.call(this,r);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(r){t=null}n[r]=t}return n[r]}}(),c=null,s=0,p=[],d=t(22);function u(r,n){for(var t=0;t<r.length;t++){var e=r[t],o=i[e.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](e.parts[a]);for(;a<e.parts.length;a++)o.parts.push(y(e.parts[a],n))}else{var l=[];for(a=0;a<e.parts.length;a++)l.push(y(e.parts[a],n));i[e.id]={id:e.id,refs:1,parts:l}}}}function f(r,n){for(var t=[],e={},o=0;o<r.length;o++){var i=r[o],a=n.base?i[0]+n.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};e[a]?e[a].parts.push(l):t.push(e[a]={id:a,parts:[l]})}return t}function h(r,n){var t=l(r.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var e=p[p.length-1];if("top"===r.insertAt)e?e.nextSibling?t.insertBefore(n,e.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),p.push(n);else if("bottom"===r.insertAt)t.appendChild(n);else{if("object"!=typeof r.insertAt||!r.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(r.insertInto+" "+r.insertAt.before);t.insertBefore(n,o)}}function m(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r);var n=p.indexOf(r);n>=0&&p.splice(n,1)}function b(r){var n=document.createElement("style");return r.attrs.type="text/css",g(n,r.attrs),h(r,n),n}function g(r,n){Object.keys(n).forEach(function(t){r.setAttribute(t,n[t])})}function y(r,n){var t,e,o,i;if(n.transform&&r.css){if(!(i=n.transform(r.css)))return function(){};r.css=i}if(n.singleton){var a=s++;t=c||(c=b(n)),e=w.bind(null,t,a,!1),o=w.bind(null,t,a,!0)}else r.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(r){var n=document.createElement("link");return r.attrs.type="text/css",r.attrs.rel="stylesheet",g(n,r.attrs),h(r,n),n}(n),e=function(r,n,t){var e=t.css,o=t.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(e=d(e));o&&(e+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([e],{type:"text/css"}),l=r.href;r.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,t,n),o=function(){m(t),t.href&&URL.revokeObjectURL(t.href)}):(t=b(n),e=function(r,n){var t=n.css,e=n.media;e&&r.setAttribute("media",e);if(r.styleSheet)r.styleSheet.cssText=t;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){m(t)});return e(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap)return;e(r=n)}else o()}}r.exports=function(r,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=a()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=f(r,n);return u(t,n),function(r){for(var e=[],o=0;o<t.length;o++){var a=t[o];(l=i[a.id]).refs--,e.push(l)}r&&u(f(r,n),n);for(o=0;o<e.length;o++){var l;if(0===(l=e[o]).refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete i[l.id]}}}};var v,x=(v=[],function(r,n){return v[r]=n,v.filter(Boolean).join("\n")});function w(r,n,t,e){var o=t?"":e.css;if(r.styleSheet)r.styleSheet.cssText=x(n,o);else{var i=document.createTextNode(o),a=r.childNodes;a[n]&&r.removeChild(a[n]),a.length?r.insertBefore(i,a[n]):r.appendChild(i)}}},function(r,n){r.exports=function(r){var n=[];return n.toString=function(){return this.map(function(n){var t=function(r,n){var t=r[1]||"",e=r[3];if(!e)return t;if(n&&"function"==typeof btoa){var o=(a=e,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=e.sources.map(function(r){return"/*# sourceURL="+e.sourceRoot+r+" */"});return[t].concat(i).concat([o]).join("\n")}var a;return[t].join("\n")}(n,r);return n[2]?"@media "+n[2]+"{"+t+"}":t}).join("")},n.i=function(r,t){"string"==typeof r&&(r=[[null,r,""]]);for(var e={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(e[i]=!0)}for(o=0;o<r.length;o++){var a=r[o];"number"==typeof a[0]&&e[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),n.push(a))}},n}},function(r,n,t){angular.module("pubgApp").component("appPlayerSection",{template:t(27),controller:function(){}})},function(r,n,t){(r.exports=t(1)(!1)).push([r.i,"*, *::before, *::after {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding:0;\r\n}\r\nbody {\r\n    font-family: 'Athiti', sans-serif;\r\n    background-color: #fafafa;\r\n}\r\nhtml {\r\n    \r\n    font-size: 62.5%;\r\n}",""])},function(r,n,t){var e=t(3);"string"==typeof e&&(e=[[r.i,e,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(0)(e,o);e.locals&&(r.exports=e.locals)},function(r,n,t){(r.exports=t(1)(!1)).push([r.i,".app-footer {\r\n    display: flex;\r\n    height: 20rem;\r\n    background-color: inherit;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.footer-container {\r\n    flex-basis: 50%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n}\r\n\r\n\r\n.footer-copyright {\r\n    font-size: 2.5rem;\r\n    letter-spacing: .2rem;\r\n    font-weight: 600;\r\n    color: #10b295;\r\n}",""])},function(r,n,t){var e=t(5);"string"==typeof e&&(e=[[r.i,e,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(0)(e,o);e.locals&&(r.exports=e.locals)},function(r,n){r.exports='<div class="app-footer">\r\n    <div class="footer-container">\r\n        \r\n            <h2 class="footer-copyright">Made by Anatolii Yatsenko &copy; 2018</h2>\r\n        \r\n    </div>\r\n</div>'},function(r,n,t){angular.module("pubgApp").component("appFooter",{template:t(7),controller:function(){}}),t(6)},function(r,n,t){(r.exports=t(1)(!1)).push([r.i,"/* Style the video: 100% width and height to cover the entire window */\r\n#myVideo {\r\n    position: fixed;\r\n    right: 0;\r\n    bottom: 0;\r\n    min-width: 100%; \r\n    min-height: 100%;\r\n}\r\n\r\n/* Add some content at the bottom of the video/page */\r\n.content {\r\n    position: fixed;\r\n    bottom: 0;\r\n    background: rgba(0, 0, 0, 0.5);\r\n    color: #f1f1f1;\r\n    width: 100%;\r\n    padding: 20px;\r\n}\r\n\r\n/* Style the button used to pause/play the video */\r\n#myBtn {\r\n    width: 200px;\r\n    font-size: 18px;\r\n    padding: 10px;\r\n    border: none;\r\n    background: #000;\r\n    color: #fff;\r\n    cursor: pointer;\r\n}\r\n\r\n#myBtn:hover {\r\n    background: #ddd;\r\n    color: black;\r\n}",""])},function(r,n,t){var e=t(9);"string"==typeof e&&(e=[[r.i,e,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(0)(e,o);e.locals&&(r.exports=e.locals)},function(r,n){r.exports='\x3c!-- The video --\x3e\r\n<video autoplay muted loop id="myVideo">\r\n    <source src="rain.mp4" type="video/mp4">\r\n</video>\r\n\r\n\x3c!-- Optional: some overlay text to describe the video --\x3e\r\n<div class="content">\r\n    <h1>Heading</h1>\r\n    <p>Lorem ipsum...</p> \r\n</div>'},function(r,n,t){angular.module("pubgApp").component("appWelcome",{template:t(11),controller:function(){}}),t(10)},function(r,n){},function(r,n,t){(r.exports=t(1)(!1)).push([r.i,"/* * { box-sizing: border-box; }\r\nbody {\r\n  font: 16px Arial; \r\n}\r\n.autocomplete {\r\n  position: relative;\r\n  display: inline-block;\r\n}\r\ninput {\r\n  border: 1px solid transparent;\r\n  background-color: #f1f1f1;\r\n  padding: 10px;\r\n  font-size: 16px;\r\n}\r\ninput[type=text] {\r\n  background-color: #f1f1f1;\r\n}\r\ninput[type=submit] {\r\n  background-color: DodgerBlue;\r\n  color: #fff;\r\n}\r\n.autocomplete-items {\r\n  position: absolute;\r\n  border: 1px solid #d4d4d4;\r\n  border-bottom: none;\r\n  border-top: none;\r\n  z-index: 99;\r\n  \r\n  top: 100%;\r\n  left: 0;\r\n  right: 0;\r\n}\r\n.autocomplete-items div {\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  background-color: #fff; \r\n  border-bottom: 1px solid #d4d4d4; \r\n}\r\n.autocomplete-items div:hover {\r\n  background-color: #e9e9e9; \r\n}\r\n.autocomplete-active {\r\n  background-color: DodgerBlue !important; \r\n  color: #ffffff; \r\n} */",""])},function(r,n,t){var e=t(14);"string"==typeof e&&(e=[[r.i,e,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(0)(e,o);e.locals&&(r.exports=e.locals)},function(r,n){r.exports='\x3c!--Make sure the form has the autocomplete function switched off:--\x3e\r\n<form autocomplete="off" action="/action_page.php">\r\n    <div style="width:300px;">\r\n      <input id="myInput" type="text" name="myCountry" placeholder="Country">\r\n    </div>\r\n    <input type="submit">\r\n  </form>'},function(r,n,t){angular.module("pubgApp").component("appPlayerForm",{template:t(16),controller:function(){}}),t(15)},function(r,n,t){(r.exports=t(1)(!1)).push([r.i,".player-section {\r\n    padding-top: 3.2rem;\r\n    padding-bottom: 3.5rem;\r\n}\r\ninput:-webkit-autofill {\r\n    -webkit-box-shadow: inset 0 0 0 50px #fafafa;\r\n    -webkit-text-fill-color: #10b295 !important;\r\n}\r\n.container {\r\n    width: 80%;\r\n    margin: auto;\r\n}\r\n\r\n.welcome-msg {\r\n    font-size: 4.2rem;\r\n    color: #1E90FF;\r\n    text-align: center;\r\n}\r\n\r\n\r\n.player-form-container {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    margin-top: 7rem;\r\n    margin-bottom: 2rem;\r\n}\r\n\r\n\r\n/* \r\n.select-label {\r\n    font-size: 1.6rem;\r\n    color: #10b295;\r\n    display: block;\r\n    font-weight: 600;\r\n    margin-bottom: .5rem;\r\n} */\r\n/* \r\n.player-name-input {\r\n    font-size: 2rem;\r\n    height: 3rem;\r\n    width: 100%;\r\n    border: none;\r\n    border-bottom: 2px solid #10b295;\r\n    background-color: inherit;\r\n    color: #333333;\r\n    font-style: italic;\r\n    transition: letter-spacing .2s;\r\n} */\r\n\r\n/* .player-name-input:focus {\r\n    outline: none;\r\n    letter-spacing: .1rem;\r\n    font-size: 2.2rem;\r\n} */\r\n\r\n.player-region-select {\r\n    height: 3rem;\r\n    display: block;\r\n    border: 1px solid #10b295;\r\n    width: 100%;\r\n    font-size: 2rem;\r\n    outline: none;\r\n    border-radius: 5px;\r\n    color: #10b295;\r\n}\r\n\r\n.player-region-select-option {\r\n    font-size: 2rem;\r\n}\r\n\r\n.player-match-select {\r\n    height: 3rem;\r\n    display: block;\r\n    border: 1px solid #10b295;\r\n    width: 100%;\r\n    font-size: 2rem;\r\n    outline: none;\r\n    border-radius: 5px;\r\n    color: #10b295;\r\n}\r\n\r\n.player-match-select-option {\r\n    flex-basis: 50%;\r\n}\r\n\r\n.player-search-user-container {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.player-search-user-button {\r\n    display: block;\r\n    font-size: 2rem;\r\n    padding: .5rem;\r\n    flex-basis: 50%;\r\n    color: #fafafa;\r\n    background-color: #10b295;\r\n    border: 1px solid #1E90FF;\r\n    border-radius: 10px;\r\n    outline: none;\r\n    transition: all .1s;\r\n}\r\n\r\n.player-search-user-button:active {\r\n    transform: scale(1.04) translateX(8px);\r\n    letter-spacing: .1rem;\r\n    background-color: #10B2C6;\r\n}\r\n\r\n.player-select-section {\r\n    display: flex;\r\n    width: 50%;\r\n    justify-content: space-between;\r\n    margin-bottom: 2rem;\r\n}\r\n\r\n.player-region-container {\r\n    display: flex;\r\n    width: 45%;\r\n    flex-direction: column;\r\n}\r\n\r\n.player-match-container {\r\n    display: flex;\r\n    width: 50%;\r\n    flex-direction: column;\r\n}\r\n\r\n.match-info-container {\r\n    width: 100%;\r\n    display: block;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    padding: 5rem 0 6rem 0;\r\n}\r\n\r\n.match-info {\r\n    display: flex;\r\n    width: 70%;\r\n    list-style: none;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n    margin-top: 2rem;\r\n}\r\n\r\n.match-info>li {\r\n    flex-basis: 30%;\r\n    height: 5rem;\r\n    border-bottom: 1px solid #10b295;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #1E90FF;\r\n}\r\n\r\n.match-info-mapName {\r\n    color: #1E90FF;\r\n    font-size: 4rem;\r\n    letter-spacing: .2rem;\r\n    border-bottom: #10b295;\r\n    display: block;\r\n    align-content: center;\r\n    margin: .5rem 0 1rem 0;\r\n}\r\n\r\n.match-info-mode {\r\n    font-size: 2.5rem;\r\n}\r\n\r\n.match-info-type {\r\n    font-size: 2.5rem;\r\n}\r\n\r\n.match-info-playerCount {\r\n    font-size: 2.5rem;\r\n}\r\n\r\n.match-info-played {\r\n    font-size: 2.5rem;\r\n    color: #1E90FF;\r\n    border-bottom: 1px solid #10b295;\r\n}\r\n\r\n.filter-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 30%;\r\n    margin: 4rem auto 7rem auto;\r\n}\r\n\r\n.player-input-name-section {\r\n    display: block;\r\n    position: relative;\r\n    width: 50%;\r\n    margin-bottom: 2rem;\r\n}\r\n.filter-container {\r\n    display: block;\r\n    position: relative;\r\n    width: 30%;\r\n    margin-bottom: 8rem;\r\n}\r\n\r\n.player-input-name-section label, .filter-container label{\r\n    position: absolute;\r\n    left: 0;\r\n    /* font-size: 1.6rem; */\r\n    color: #333333;\r\n    display: block;\r\n    font-weight: 600;\r\n    margin-bottom: .5rem;\r\n    top: -1.5rem;\r\n    cursor: text;\r\n    font-size: 120%;\r\n    opacity: 1;\r\n    transition: all 0.2s;\r\n}\r\n\r\n\r\n.player-name-input, .filter-input {\r\n    font-family: 'Athiti', sans-serif;\r\n    font-size: inherit;\r\n    margin-bottom: .2rem;\r\n    font-size: 2rem;\r\n    height: 3rem;\r\n    font-weight: 600;\r\n    width: 100%;\r\n    color: #10b295;\r\n    border: none;\r\n    border-bottom: 2px solid;\r\n    background-color: inherit;\r\n\r\n    transition: letter-spacing .2s;\r\n}\r\n.player-input-name-section input::placeholder,\r\n.filter-container input::placeholder {\r\n    opacity: 1;\r\n    color: #10b295;\r\n}\r\n\r\n\r\n\r\n  .player-input-name-section input:placeholder-shown:not(:focus)::placeholder,\r\n  .filter-container input:placeholder-shown:not(:focus)::placeholder {\r\n    opacity: 0;\r\n  }\r\n  .player-input-name-section input:placeholder-shown:not(:focus) + *,\r\n  .filter-container input:placeholder-shown:not(:focus) + *  {\r\n    font-size: 2rem;\r\n    opacity: 1;\r\n    color: #10b295;\r\n    top: -.2rem;\r\n  }\r\n  .player-name-input.ng-valid.ng-not-empty.ng-dirty.ng-valid-parse.ng-touched,\r\n  .filter-input.ng-valid.ng-not-empty.ng-dirty.ng-valid-parse.ng-touched {\r\n      border-color: #333333;\r\n  }\r\n\r\n  /* .player-input-name-section  .filter-input:focus::-webkit-input-placeholder {\r\n    color:#10b295;\r\n  } */\r\n  .player-input-name-section input:focus,\r\n  .filter-container input:focus {\r\n    /* outline: none;\r\n    letter-spacing: .1rem;\r\n    font-size: 2.2rem; */\r\n    color: #10b295;\r\n    outline: none;\r\n    border-color: #333333;\r\n  }\r\n/*   \r\n.filter-input {\r\n    font-size: 2rem;\r\n    height: 3rem;\r\n    width: 100%;\r\n    border: none;\r\n    border-bottom: 3px solid #10b295;\r\n    background-color: inherit;\r\n    color: #333333;\r\n    font-style: italic;\r\n    transition: letter-spacing .2s;\r\n}\r\n\r\n.filter-input::-webkit-input-placeholder {\r\n    color: green;\r\n}\r\n\r\n.filter-input:focus {\r\n    outline: none;\r\n    letter-spacing: .1rem;\r\n    font-size: 2.2rem;\r\n} */\r\n\r\n.player-table {\r\n    width: 100%;\r\n    margin-bottom: 20rem;\r\n    font-size: 2rem;\r\n    border-collapse: collapse;\r\n}\r\n\r\n.player-table th {\r\n    border: 2px solid #33BFEB;\r\n    padding: .3rem 0;\r\n    color: #fafafa;\r\n    background-color: #1E90FF;\r\n    cursor: s-resize;\r\n}\r\n\r\n.player-table td,\r\n.player-table th {\r\n    border: 2px solid #33BFEB;\r\n    padding: .3rem 0;\r\n}\r\n\r\n.player-table-row th:nth-child(1) {\r\n    width: 5%;\r\n}\r\n\r\n.player-table-row th:nth-child(2) {\r\n    width: 20%;\r\n    padding: .3rem 0;\r\n}\r\n\r\n.player-table-row th:nth-child(3) {\r\n    width: 5%;\r\n}\r\n\r\n.player-table-row th:nth-child(4) {\r\n    width: 10%;\r\n}\r\n\r\n.player-table-row th:nth-child(5) {\r\n    width: 10%;\r\n}\r\n\r\n.player-table-row th:nth-child(6) {\r\n    width: 10%;\r\n}\r\n\r\n.player-table-row th:nth-child(7) {\r\n    width: 8%;\r\n}\r\n\r\n.player-table-row th:nth-child(8) {\r\n    width: 8%;\r\n}\r\n\r\n.player-table-row th:nth-child(9) {\r\n    width: 7%;\r\n}\r\n\r\n.player-table-row th:nth-child(10) {\r\n    width: 8%;\r\n}\r\n.player-table-row th:nth-child(11) {\r\n    width: 9%;\r\n}\r\n.player-table tbody tr>td:nth-of-type(2) {\r\n    font-weight: 600;\r\n    padding-left: 1rem;\r\n    color: #1E90FF;\r\n}\r\n\r\n.player-table tbody tr>td:not(:nth-of-type(2)) {\r\n    text-align: center;\r\n    color: #1E90FF;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n",""])},function(r,n,t){var e=t(18);"string"==typeof e&&(e=[[r.i,e,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(0)(e,o);e.locals&&(r.exports=e.locals)},function(r,n){r.exports='<section class="player-section">\r\n    <div class="container">\r\n        <div class="player-container">\r\n            <div class="welcome-msg">\r\n                <h2>Welcome to PUBG History API</h2>\r\n            </div>\r\n            <div class="player-form-container">\r\n                <div class="player-input-name-section">\r\n                   \r\n                    <input autocomplete="on" id="player-name-input" class="player-name-input" ng-model="$ctrl.searchPlayer"  type="text" placeholder="Player name ...">\r\n                    <label class="select-label" for="player-name-input">Player name:</label>\r\n                </div>\r\n                <div class="player-select-section">\r\n                    <div class="player-region-container">\r\n                        <h2 class="select-label">Region: </h2>\r\n                        <select class="player-region-select" ng-model="$ctrl.region" placeholder="region">\r\n                            <option class="player-region-select-option" ng-repeat="region in $ctrl.regions" value={{region}}>{{region}}</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div class="player-match-container" ng-if="$ctrl.matches">\r\n                        <h2 class="select-label">Match: </h2>\r\n                        <select class="player-match-select" ng-model="$ctrl.match" ng-change="$ctrl.getMatch($ctrl.match)">\r\n                            <option class="player-match-select-option" ng-repeat="match in $ctrl.matches" value={{match.id}}>{{$index + 1}} - {{match.id}}</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class="player-search-user-container">\r\n                <button class="player-search-user-button" ng-click="$ctrl.search()">Search</button>\r\n\r\n            </div>\r\n\r\n            \r\n            <div ng-if="$ctrl.match.data.data.attributes" class="match-info-container">\r\n\r\n                <div class="match-info-mapName">{{$ctrl.match.data.data.attributes.mapName | mapFilter}}</div>\r\n                <div class="match-info-played">{{$ctrl.match.data.data.attributes.createdAt | date:\'medium\' }}</div>\r\n\r\n                <ul class="match-info">\r\n                    <li class="match-info-mode">\r\n                        <div>Mode: {{$ctrl.match.data.data.attributes.gameMode | modeFilter}}</div>\r\n                    </li>\r\n                    <li class="match-info-type">\r\n                        <div>Match type: {{$ctrl.match.data.data.attributes.gameMode | matchTypeFilter}}</div>\r\n                    </li>\r\n                    <li class="match-info-playerCount">\r\n                        <div>Participants: {{viewData.filteredArray.length}}</div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div class="filter-container" ng-if="$ctrl.match.data.included">\r\n                <input placeholder="Filter value here ..." id="filter-input" class="filter-input" type="text" ng-model="$ctrl.filterValue">\r\n                <label for="filter-input">Filter</label>\r\n            </div>\r\n\r\n            <table border="1" class="player-table" ng-if="$ctrl.match.data.included">\r\n                <thead>\r\n                    <tr class="player-table-row">\r\n\r\n                        <th>#</th>\r\n                        <th>Player</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'winPlace\', $ctrl.reversal)">Place</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'kills\', $ctrl.reversal)">Kills</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'DBNOs\', $ctrl.reversal)">Knocked Times</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'damageDealt\', $ctrl.reversal)">Damage Dealt</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'assists\', $ctrl.reversal)">Assists</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'heals\', $ctrl.reversal)">Heals</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'boosts\', $ctrl.reversal)">Boosts</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'revives\', $ctrl.reversal)">Revives</th>\r\n                        <th ng-click="$ctrl.changeSortProperty(\'longestKill\', $ctrl.reversal)">Longest Kill</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr ng-repeat=\'player in (viewData.filteredArray = ($ctrl.match.data.included | playerFilter:$ctrl.sortProperty:$ctrl.reversal | filter: $ctrl.filterValue ))\'>\r\n\r\n                        <td>{{$index + 1}}</td>\r\n                        <td>{{player.attributes.stats.name}}</td>\r\n                        <td>{{player.attributes.stats.winPlace}}</td>\r\n                        <td>{{player.attributes.stats.kills}}({{player.attributes.stats.headshotKills}}head)</td>\r\n                        <td>{{player.attributes.stats.DBNOs}}</td>\r\n                        <td>{{player.attributes.stats.damageDealt | parseToIntFilter}}hp</td>\r\n                        <td>{{player.attributes.stats.assists}}</td>\r\n                        <td>{{player.attributes.stats.heals}}heals</td>\r\n                        <td>{{player.attributes.stats.boosts}}boosts</td>\r\n                        <td>{{player.attributes.stats.revives}}revives</td>\r\n                        <td>{{player.attributes.stats.longestKill}}m</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n</section>'},function(r,n,t){angular.module("pubgApp").component("appPlayerInput",{template:t(20),controller:["$scope","$log","PlayerDataService","MatchDataService","RegionsService",function(r,n,t,e,o){let i=this;this.$onInit=function(){i.region="",o.allRegions().then(r=>{i.regions=r}),i.sortProperty="winPlace",r.viewData={},i.reversal=!0},i.changeSortProperty=function(r,n){i.sortProperty=r,i.reversal=Boolean(n)},i.search=function(){t.getPlayer(i.searchPlayer,i.region).then(r=>{console.log(r.data.data[0]),i.matches=r.data.data[0].relationships.matches.data,console.log(i.matches)})},i.getMatch=function(r){console.log(r),e.getMatchData(r,i.region).then(r=>{i.match=r,console.log(r)})}}]}),t(19)},function(r,n){r.exports=function(r){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!r||"string"!=typeof r)return r;var t=n.protocol+"//"+n.host,e=t+n.pathname.replace(/\/[^\/]*$/,"/");return r.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(r,n){var o,i=n.trim().replace(/^"(.*)"$/,function(r,n){return n}).replace(/^'(.*)'$/,function(r,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?r:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?t+i:e+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(r,n,t){(r.exports=t(1)(!1)).push([r.i,".topnav {\r\n    background-color: #333;\r\n    overflow: hidden;\r\n}\r\n\r\n/* Style the links inside the navigation bar */\r\n.topnav a {\r\n    float: left;\r\n    color: #f2f2f2;\r\n    text-align: center;\r\n    padding: 14px 16px;\r\n    text-decoration: none;\r\n    font-size: 17px;\r\n}\r\n\r\n/* Change the color of links on hover */\r\n.topnav a:hover {\r\n    background-color: #ddd;\r\n    color: black;\r\n}\r\n\r\n/* Add a color to the active/current link */\r\n.topnav a.active {\r\n    background-color: #4CAF50;\r\n    color: white;\r\n}\r\n",""])},function(r,n,t){var e=t(23);"string"==typeof e&&(e=[[r.i,e,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(0)(e,o);e.locals&&(r.exports=e.locals)},function(r,n){r.exports='<div class="topnav">\r\n    <a class="active" href="#home">Home</a>\r\n    <a href="#news">News</a>\r\n    <a href="#contact">Contact</a>\r\n    <a href="#about">About</a>\r\n</div>\r\n\x3c!-- <header class="navigation">\r\n    <div class="container">\r\n        <div class="header">\r\n            <div class="logo">\r\n                <img src="" alt="">\r\n            </div>\r\n            <nav class="nav">\r\n                <ul class="navlist">\r\n                    <li class="navitem">Players</li>\r\n                    <li class="navitem">Matches</li>\r\n                    <li class="navitem">About</li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    </div>\r\n</header> --\x3e'},function(r,n,t){angular.module("pubgApp").component("appNavBar",{template:t(25),controller:function(){this.name="William"}}),t(24)},function(r,n){r.exports="<app-player-input></app-player-input>\r\n"},function(r,n){angular.module("pubgApp").filter("mapFilter",function(){return function(r){if(!r)return;let n=r.split("_");return n.pop(),n.join("")}})},function(r,n){angular.module("pubgApp").filter("matchTypeFilter",function(){return function(r){if(r){if(-1!=r.indexOf("-")){let n=r.split("-");return n.shift(),n.join("")}return r.slice(r.length-3,r.length)}}})},function(r,n){angular.module("pubgApp").filter("modeFilter",function(){return function(r){if(r){if(-1!=r.indexOf("-")){let n=r.split("-");return n.pop(),n.join("")}return r.slice(0,r.length-3)}}})},function(r,n){angular.module("pubgApp").filter("parseToIntFilter",function(){return function(r){return parseInt(r).toFixed()}})},function(r,n){angular.module("pubgApp").filter("playerFilter",function(){return function(r,n,t){return r.filter(r=>"participant"==r.type).sort((r,t)=>{if("winPlace"!=n){let e=parseInt(Number(r.attributes.stats[n])),o=parseInt(Number(t.attributes.stats[n]));return e<o?1:e>o?-1:0}{let e=parseInt(Number(r.attributes.stats[n])),o=parseInt(Number(t.attributes.stats[n]));return e>o?1:e<o?-1:0}})}})},function(r,n){angular.module("pubgApp").service("RegionsService",["$q",class{constructor(r){this.q=r}allRegions(){return this.q((r,n)=>{r(["xbox-as","xbox-eu","xbox-na","xbox-oc","pc-krjp","pc-jp","pc-na","pc-eu","pc-oc","pc-kakao","pc-sea","pc-sa","pc-as"])})}}])},function(r,n){angular.module("pubgApp").service("PlayerDataService",["$http",class{constructor(r){this.http=r}getPlayer(r,n){return this.http({method:"GET",url:`https://api.playbattlegrounds.com/shards/${n}/players?filter[playerNames]=${r}`,headers:{Accept:"application/vnd.api+json",Authorization:"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJlZTU4NDdjMC0xYTczLTAxMzYtOWE0NS02MWFjOTE3MDJiMmEiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNTIyODczMzk2LCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6ImFzdG9uMDAiLCJzY29wZSI6ImNvbW11bml0eSIsImxpbWl0IjoxMH0.Ehj2HmctxqBo6tXKJgFgaxaCijN6QO3acqbdbudjy50"}})}}])},function(r,n){angular.module("pubgApp").service("MatchDataService",["$http",class{constructor(r){this.http=r}getMatchData(r,n){return this.http({method:"GET",url:`https://api.playbattlegrounds.com/shards/${n}/matches/${r}`,headers:{Accept:"application/vnd.api+json",Authorization:"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJlZTU4NDdjMC0xYTczLTAxMzYtOWE0NS02MWFjOTE3MDJiMmEiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNTIyODczMzk2LCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6ImFzdG9uMDAiLCJzY29wZSI6ImNvbW11bml0eSIsImxpbWl0IjoxMH0.Ehj2HmctxqBo6tXKJgFgaxaCijN6QO3acqbdbudjy50"}})}}])},function(r,n,t){angular.module("pubgApp",["ui.router"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(r,n,t){n.otherwise("/"),r.state("home",{url:"/",template:"<app-player-input></app-player-input> "})}]),t(35),t(34),t(33),t(32),t(31),t(30),t(29),t(28),t(2),t(26),t(2),t(21),t(17),t(13),t(12),t(8),t(4)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,